buildscript {
	repositories {
		jcenter()
        maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
	}
	dependencies {
		classpath "net.fabricmc:fabric-loom:0.2.6-SNAPSHOT"
	}
}

apply plugin: net.fabricmc.loom.LoomGradlePlugin
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	jcenter()
	maven {
		name = 'sponge'
		url = 'https://repo.spongepowered.org/maven'
	}
}

version = "4.0.23"
group = 'RebornCore'

def ENV = System.getenv()
def build_number = ENV.BUILD_NUMBER ?: "local"
version = "${version}+build.$build_number"

configurations {
	ctRuntime {}
}

dependencies {
	minecraft "com.mojang:minecraft:1.15-pre2"
	mappings "net.fabricmc:yarn:1.15-pre2+build.3:v2"
	modCompile "net.fabricmc:fabric-loader:0.7.1+build.173"

	//Fabric api
	modCompile "net.fabricmc.fabric-api:fabric-api:0.4.16+build.268-1.15"

	compileOnly "com.google.code.findbugs:jsr305:+"

	compile 'org.checkerframework:checker-qual:2.10.0'
	compile 'org.spongepowered:configurate-hocon:3.6'

	include 'org.spongepowered:configurate-hocon:3.6'
	include 'org.spongepowered:configurate-core:3.6'
	include 'com.typesafe:config:1.3.1'

	compile 'teamreborn:energy:0.0.8'
	include 'teamreborn:energy:0.0.8'

	ctRuntime "CurseTools:CurseTools:+"
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}


task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		maven {
			url "http://mavenupload.modmuss50.me/"
			if (project.hasProperty('mavenPass')) {
				credentials {
					username 'buildslave'
					password project.getProperty('mavenPass')
				}
			}
		}
	}
}

task curseTools {
	doLast {
		logger.lifecycle(":launching CurseTools")
		ant.setLifecycleLogLevel "INFO"
		ant.java(classname: 'me.modmuss50.cursetools.Main', classpath: configurations.ctRuntime.asPath, fork: true, spawn: false) {
			arg(value: remapJar.archivePath.getAbsolutePath())
		}
	}
}

task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
}
